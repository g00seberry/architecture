import { CommandIoCBootstrap, IoC } from "../ex5/IoC";
import { IoCDependencyContainer } from "../ex5/IoCDependencyContainer";
import { IoCResolveStrategyStd } from "../ex5/IoCResolveStrategyStd";
import { IoCScopeTreeContainer } from "../ex5/IoCScopeTreeContainer";
import { IVector, Vector2 } from "../ex[2-4]/Core/IVector";
import { createStrategyGenerateAdapters } from "./createStrategyGenerateAdapters";

test("StrategyGenerateAdapters test", async () => {
  new CommandIoCBootstrap(
    new IoCScopeTreeContainer(new IoCDependencyContainer(), "root"),
    new IoCResolveStrategyStd()
  ).execute();

  createStrategyGenerateAdapters().execute();

  const generatedAdapter = IoC.resolve("AutoGeneratedIMovable4Gen")({});

  IoC.resolve("register")(
    "AutoGeneratedIMovable4Gen.setPosition",
    (obj: any, pos: IVector) => {
      obj.pos = pos;
      return pos;
    }
  );
  IoC.resolve("register")(
    "AutoGeneratedIMovable4Gen.getPosition",
    (obj: any) => {
      return obj.pos;
    }
  );
  IoC.resolve("register")(
    "AutoGeneratedIMovable4Gen.getVelocity",
    (obj: any) => {
      return obj.vel;
    }
  );
  IoC.resolve("register")("AutoGeneratedIMovable4Gen.finish", () => {
    throw Error("finish is running!");
  });

  //@ts-ignore
  expect(generatedAdapter.obj).toEqual({});
  //@ts-ignore
  generatedAdapter.setPosition(new Vector2([1, 1]));
  //@ts-ignore
  expect(generatedAdapter.obj).toEqual({ pos: { coords: [1, 1] } });
  //@ts-ignore
  expect(generatedAdapter.getPosition()).toEqual({ coords: [1, 1] });
  //@ts-ignore
  expect(generatedAdapter.getVelocity()).toEqual(undefined);
  //@ts-ignore
  expect(() => generatedAdapter.finish()).toThrow("finish is running!");
});
